{"ast":null,"code":"var __assign = this && this.__assign || function () {\n  __assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n\n      for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n    }\n\n    return t;\n  };\n\n  return __assign.apply(this, arguments);\n};\n\nexport function routeReducer(route, chunk) {\n  if (route) {\n    if (chunk.type === 'url') {\n      return __assign(__assign({}, route), {\n        chunks: route.chunks.filter(function (chunk) {\n          return chunk.type !== 'url';\n        }),\n        url: chunk.url\n      });\n    }\n\n    if (route.type !== 'ready') {\n      return route;\n    }\n  }\n\n  var base = {\n    lastChunk: chunk,\n    method: chunk.request && chunk.request.method,\n    chunks: route ? route.chunks.concat(chunk) : [chunk],\n    data: route ? route.data : {},\n    headers: route ? route.headers : {},\n    heads: route ? route.heads : [],\n    state: route ? route.state : {},\n    status: route ? route.status : 200,\n    title: route && route.title,\n    url: route ? route.url : chunk.url,\n    views: route ? route.views : []\n  };\n\n  switch (chunk.type) {\n    case 'busy':\n      return __assign(__assign({}, base), {\n        type: 'busy'\n      });\n\n    case 'data':\n      return __assign(__assign({}, base), {\n        type: 'ready',\n        data: __assign(__assign({}, base.data), chunk.data)\n      });\n\n    case 'error':\n      return __assign(__assign({}, base), {\n        type: 'error',\n        error: chunk.error,\n        status: base.status && base.status >= 400 ? base.status : chunk.error.status || 500\n      });\n\n    case 'head':\n      return __assign(__assign({}, base), {\n        type: 'ready',\n        heads: base.heads.concat(chunk.head)\n      });\n\n    case 'headers':\n      return __assign(__assign({}, base), {\n        type: 'ready',\n        headers: __assign(__assign({}, base.headers), chunk.headers)\n      });\n\n    case 'redirect':\n      return __assign(__assign({}, base), {\n        type: 'redirect',\n        to: chunk.to\n      });\n\n    case 'state':\n      return __assign(__assign({}, base), {\n        type: 'ready',\n        state: __assign(__assign({}, base.state), chunk.state)\n      });\n\n    case 'status':\n      return __assign(__assign({}, base), {\n        type: 'ready',\n        status: chunk.status\n      });\n\n    case 'title':\n      return __assign(__assign({}, base), {\n        type: 'ready',\n        title: chunk.title\n      });\n\n    case 'view':\n      return __assign(__assign({}, base), {\n        type: 'ready',\n        views: base.views.concat(chunk.view)\n      });\n\n    default:\n      return __assign(__assign({}, base), {\n        type: 'ready'\n      });\n  }\n}","map":{"version":3,"sources":["../../src/Route.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["var __assign = (this && this.__assign) || function () {\n    __assign = Object.assign || function(t) {\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\n            s = arguments[i];\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))\n                t[p] = s[p];\n        }\n        return t;\n    };\n    return __assign.apply(this, arguments);\n};\nexport function routeReducer(route, chunk) {\n    if (route) {\n        if (chunk.type === 'url') {\n            return __assign(__assign({}, route), { chunks: route.chunks.filter(function (chunk) { return chunk.type !== 'url'; }), url: chunk.url });\n        }\n        if (route.type !== 'ready') {\n            return route;\n        }\n    }\n    var base = {\n        lastChunk: chunk,\n        method: (chunk.request && chunk.request.method),\n        chunks: route ? route.chunks.concat(chunk) : [chunk],\n        data: route ? route.data : {},\n        headers: route ? route.headers : {},\n        heads: route ? route.heads : [],\n        state: route ? route.state : {},\n        status: route ? route.status : 200,\n        title: route && route.title,\n        url: route ? route.url : chunk.url,\n        views: route ? route.views : [],\n    };\n    switch (chunk.type) {\n        case 'busy':\n            return __assign(__assign({}, base), { type: 'busy' });\n        case 'data':\n            return __assign(__assign({}, base), { type: 'ready', data: __assign(__assign({}, base.data), chunk.data) });\n        case 'error':\n            return __assign(__assign({}, base), { type: 'error', error: chunk.error, status: base.status && base.status >= 400\n                    ? base.status\n                    : chunk.error.status || 500 });\n        case 'head':\n            return __assign(__assign({}, base), { type: 'ready', heads: base.heads.concat(chunk.head) });\n        case 'headers':\n            return __assign(__assign({}, base), { type: 'ready', headers: __assign(__assign({}, base.headers), chunk.headers) });\n        case 'redirect':\n            return __assign(__assign({}, base), { type: 'redirect', to: chunk.to });\n        case 'state':\n            return __assign(__assign({}, base), { type: 'ready', state: __assign(__assign({}, base.state), chunk.state) });\n        case 'status':\n            return __assign(__assign({}, base), { type: 'ready', status: chunk.status });\n        case 'title':\n            return __assign(__assign({}, base), { type: 'ready', title: chunk.title });\n        case 'view':\n            return __assign(__assign({}, base), { type: 'ready', views: base.views.concat(chunk.view) });\n        default:\n            return __assign(__assign({}, base), { type: 'ready' });\n    }\n}\n//# sourceMappingURL=Route.js.map"]},"metadata":{},"sourceType":"module"}