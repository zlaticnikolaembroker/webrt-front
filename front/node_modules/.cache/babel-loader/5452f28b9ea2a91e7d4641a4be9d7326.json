{"ast":null,"code":"var _jsxFileName = \"/home/zlatic/Code/webrtc/webrtc/src/view/components/Meeting/Meeting.tsx\",\n    _s = $RefreshSig$();\n\nimport React, { useMemo } from \"react\";\nimport { LocalStorage, USERNAME_FIELD_NAME } from \"../../../localstorage/LocalStorage\";\nimport getConnectedDevices from \"../../../webrtc/WebRTC\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst Meeting = ({\n  meetingId\n}) => {\n  _s();\n\n  getConnectedDevices(\"videoinput\", result => {\n    console.log(result);\n  });\n  getConnectedDevices(\"audioinput\", result => {\n    console.log(result);\n  });\n  const userName = useMemo(() => {\n    return LocalStorage.getFromLocalStorage(USERNAME_FIELD_NAME);\n  }, []);\n\n  if (!meetingId || !meetingId.replaceAll(\" \", \"\").match(/^[0-9]+$/)) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: \"Invalid meeting id value.\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 26,\n      columnNumber: 12\n    }, this);\n  }\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [\"Welcome \", userName, \". Meeting with id \", meetingId]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 30,\n    columnNumber: 5\n  }, this);\n};\n\n_s(Meeting, \"bLTsWo8nc1A4KDYn2boIzVnV2kY=\");\n\n_c = Meeting;\nexport default Meeting;\n\nvar _c;\n\n$RefreshReg$(_c, \"Meeting\");","map":{"version":3,"sources":["/home/zlatic/Code/webrtc/webrtc/src/view/components/Meeting/Meeting.tsx"],"names":["React","useMemo","LocalStorage","USERNAME_FIELD_NAME","getConnectedDevices","Meeting","meetingId","result","console","log","userName","getFromLocalStorage","replaceAll","match"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,OAAhB,QAA+B,OAA/B;AACA,SACEC,YADF,EAEEC,mBAFF,QAGO,oCAHP;AAIA,OAAOC,mBAAP,MAAgC,wBAAhC;;;AAMA,MAAMC,OAAO,GAAG,CAAC;AAAEC,EAAAA;AAAF,CAAD,KAAiC;AAAA;;AAC/CF,EAAAA,mBAAmB,CAAC,YAAD,EAAgBG,MAAD,IAA+B;AAC/DC,IAAAA,OAAO,CAACC,GAAR,CAAYF,MAAZ;AACD,GAFkB,CAAnB;AAIAH,EAAAA,mBAAmB,CAAC,YAAD,EAAgBG,MAAD,IAA+B;AAC/DC,IAAAA,OAAO,CAACC,GAAR,CAAYF,MAAZ;AACD,GAFkB,CAAnB;AAIA,QAAMG,QAAQ,GAAGT,OAAO,CAAC,MAAM;AAC7B,WAAOC,YAAY,CAACS,mBAAb,CAAiCR,mBAAjC,CAAP;AACD,GAFuB,EAErB,EAFqB,CAAxB;;AAIA,MAAI,CAACG,SAAD,IAAc,CAACA,SAAS,CAACM,UAAV,CAAqB,GAArB,EAA0B,EAA1B,EAA8BC,KAA9B,CAAoC,UAApC,CAAnB,EAAoE;AAClE,wBAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YAAP;AACD;;AAED,sBACE;AAAA,2BACWH,QADX,wBACuCJ,SADvC;AAAA;AAAA;AAAA;AAAA;AAAA,UADF;AAKD,CAtBD;;GAAMD,O;;KAAAA,O;AAwBN,eAAeA,OAAf","sourcesContent":["import React, { useMemo } from \"react\";\nimport {\n  LocalStorage,\n  USERNAME_FIELD_NAME,\n} from \"../../../localstorage/LocalStorage\";\nimport getConnectedDevices from \"../../../webrtc/WebRTC\";\n\nexport interface MeetingProps {\n  meetingId?: string;\n}\n\nconst Meeting = ({ meetingId }: MeetingProps) => {\n  getConnectedDevices(\"videoinput\", (result: MediaDeviceInfo[]) => {\n    console.log(result);\n  });\n\n  getConnectedDevices(\"audioinput\", (result: MediaDeviceInfo[]) => {\n    console.log(result);\n  });\n\n  const userName = useMemo(() => {\n    return LocalStorage.getFromLocalStorage(USERNAME_FIELD_NAME);\n  }, []);\n\n  if (!meetingId || !meetingId.replaceAll(\" \", \"\").match(/^[0-9]+$/)) {\n    return <div>Invalid meeting id value.</div>;\n  }\n\n  return (\n    <div>\n      Welcome {userName}. Meeting with id {meetingId}\n    </div>\n  );\n};\n\nexport default Meeting;\n"]},"metadata":{},"sourceType":"module"}