{"ast":null,"code":"import { createChunk } from '../Chunks';\nimport { joinPaths, createURLDescriptor } from '../URLTools';\nimport { createChunksMatcher } from '../createChunksMatcher';\nexport function redirect(maybeResolvableTo, _a) {\n  var _b = (_a === void 0 ? {} : _a).exact,\n      exact = _b === void 0 ? true : _b;\n  return createChunksMatcher(maybeResolvableTo, undefined, function (to, request) {\n    var toHref;\n\n    if (typeof to === 'string') {\n      toHref = to[0] === '/' ? to : joinPaths('/', request.mountpath, to);\n    } else if (to) {\n      toHref = createURLDescriptor(to).href;\n    }\n\n    return toHref ? [createChunk('redirect', request, {\n      to: toHref\n    })] : [];\n  }, exact, true // proccess during crawl\n  );\n}","map":{"version":3,"sources":["../../../src/matchers/redirect.ts"],"names":[],"mappings":"AAAA,SAAS,WAAT,QAAwD,WAAxD;AAGA,SAAwB,SAAxB,EAAmC,mBAAnC,QAA8D,aAA9D;AACA,SAAS,mBAAT,QAAoC,wBAApC;AAEA,OAAM,SAAU,QAAV,CACJ,iBADI,EAEJ,EAFI,EAEiB;MAAnB,EAAA,GAAA,CAAA,EAAA,KAAA,KAAA,CAAA,GAAA,EAAA,GAAA,EAAA,EAAA,K;MAAA,KAAA,GAAA,EAAA,KAAA,KAAA,CAAA,GAAA,IAAA,GAAA,E;AAEF,SAAO,mBAAmB,CACxB,iBADwB,EAExB,SAFwB,EAGxB,UAAC,EAAD,EAAK,OAAL,EAAY;AACV,QAAI,MAAJ;;AACA,QAAI,OAAO,EAAP,KAAc,QAAlB,EAA4B;AAC1B,MAAA,MAAM,GAAG,EAAE,CAAC,CAAD,CAAF,KAAU,GAAV,GAAgB,EAAhB,GAAqB,SAAS,CAAC,GAAD,EAAM,OAAO,CAAC,SAAd,EAAyB,EAAzB,CAAvC;AACD,KAFD,MAGK,IAAI,EAAJ,EAAQ;AACX,MAAA,MAAM,GAAG,mBAAmB,CAAC,EAAD,CAAnB,CAAwB,IAAjC;AACD;;AACD,WAAO,MAAM,GAAG,CAAC,WAAW,CAAC,UAAD,EAAa,OAAb,EAAsB;AAAE,MAAA,EAAE,EAAE;AAAN,KAAtB,CAAZ,CAAH,GAAmE,EAAhF;AACD,GAZuB,EAaxB,KAbwB,EAcxB,IAdwB,CAcnB;AAdmB,GAA1B;AAgBD","sourceRoot":"","sourcesContent":["import { createChunk } from '../Chunks';\nimport { joinPaths, createURLDescriptor } from '../URLTools';\nimport { createChunksMatcher } from '../createChunksMatcher';\nexport function redirect(maybeResolvableTo, _a) {\n    var _b = (_a === void 0 ? {} : _a).exact, exact = _b === void 0 ? true : _b;\n    return createChunksMatcher(maybeResolvableTo, undefined, function (to, request) {\n        var toHref;\n        if (typeof to === 'string') {\n            toHref = to[0] === '/' ? to : joinPaths('/', request.mountpath, to);\n        }\n        else if (to) {\n            toHref = createURLDescriptor(to).href;\n        }\n        return toHref ? [createChunk('redirect', request, { to: toHref })] : [];\n    }, exact, true // proccess during crawl\n    );\n}\n//# sourceMappingURL=redirect.js.map"]},"metadata":{},"sourceType":"module"}