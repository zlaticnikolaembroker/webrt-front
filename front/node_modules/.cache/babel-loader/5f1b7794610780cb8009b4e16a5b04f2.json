{"ast":null,"code":"var _jsxFileName = \"/home/zlatic/Code/webrtc/webrtc/src/view/components/Meeting/Meeting.tsx\",\n    _s = $RefreshSig$();\n\nimport React, { useMemo } from \"react\";\nimport { LocalStorage, USERNAME_FIELD_NAME } from \"../../../localstorage/LocalStorage\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst Meeting = ({\n  meetingId\n}) => {\n  _s();\n\n  const openMediaDevices = async constraints => {\n    console.log(navigator);\n    console.log(navigator.mediaDevices.getSupportedConstraints());\n    return await navigator.mediaDevices.getUserMedia(constraints);\n  };\n\n  try {\n    openMediaDevices({\n      video: true,\n      audio: true\n    }).then(res => {\n      console.log(\"Got MediaStream:\", res);\n    }).catch(err => {\n      console.log(err);\n    });\n  } catch (error) {\n    console.error(\"Error accessing media devices.\", error);\n  }\n\n  const userName = useMemo(() => {\n    return LocalStorage.getFromLocalStorage(USERNAME_FIELD_NAME);\n  }, []);\n\n  if (!meetingId || !meetingId.replaceAll(\" \", \"\").match(/^[0-9]+$/)) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: \"Invalid meeting id value.\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 35,\n      columnNumber: 12\n    }, this);\n  }\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [\"Welcome \", userName, \". Meeting with id \", meetingId]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 39,\n    columnNumber: 5\n  }, this);\n};\n\n_s(Meeting, \"bLTsWo8nc1A4KDYn2boIzVnV2kY=\");\n\n_c = Meeting;\nexport default Meeting;\n\nvar _c;\n\n$RefreshReg$(_c, \"Meeting\");","map":{"version":3,"sources":["/home/zlatic/Code/webrtc/webrtc/src/view/components/Meeting/Meeting.tsx"],"names":["React","useMemo","LocalStorage","USERNAME_FIELD_NAME","Meeting","meetingId","openMediaDevices","constraints","console","log","navigator","mediaDevices","getSupportedConstraints","getUserMedia","video","audio","then","res","catch","err","error","userName","getFromLocalStorage","replaceAll","match"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,OAAhB,QAA+B,OAA/B;AACA,SACEC,YADF,EAEEC,mBAFF,QAGO,oCAHP;;;AASA,MAAMC,OAAO,GAAG,CAAC;AAAEC,EAAAA;AAAF,CAAD,KAAiC;AAAA;;AAC/C,QAAMC,gBAAgB,GAAG,MAAOC,WAAP,IAA+C;AACtEC,IAAAA,OAAO,CAACC,GAAR,CAAYC,SAAZ;AACAF,IAAAA,OAAO,CAACC,GAAR,CAAYC,SAAS,CAACC,YAAV,CAAuBC,uBAAvB,EAAZ;AACA,WAAO,MAAMF,SAAS,CAACC,YAAV,CAAuBE,YAAvB,CAAoCN,WAApC,CAAb;AACD,GAJD;;AAMA,MAAI;AACFD,IAAAA,gBAAgB,CAAC;AAAEQ,MAAAA,KAAK,EAAE,IAAT;AAAeC,MAAAA,KAAK,EAAE;AAAtB,KAAD,CAAhB,CACGC,IADH,CACSC,GAAD,IAAS;AACbT,MAAAA,OAAO,CAACC,GAAR,CAAY,kBAAZ,EAAgCQ,GAAhC;AACD,KAHH,EAIGC,KAJH,CAIUC,GAAD,IAAS;AACdX,MAAAA,OAAO,CAACC,GAAR,CAAYU,GAAZ;AACD,KANH;AAOD,GARD,CAQE,OAAOC,KAAP,EAAc;AACdZ,IAAAA,OAAO,CAACY,KAAR,CAAc,gCAAd,EAAgDA,KAAhD;AACD;;AAED,QAAMC,QAAQ,GAAGpB,OAAO,CAAC,MAAM;AAC7B,WAAOC,YAAY,CAACoB,mBAAb,CAAiCnB,mBAAjC,CAAP;AACD,GAFuB,EAErB,EAFqB,CAAxB;;AAIA,MAAI,CAACE,SAAD,IAAc,CAACA,SAAS,CAACkB,UAAV,CAAqB,GAArB,EAA0B,EAA1B,EAA8BC,KAA9B,CAAoC,UAApC,CAAnB,EAAoE;AAClE,wBAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YAAP;AACD;;AAED,sBACE;AAAA,2BACWH,QADX,wBACuChB,SADvC;AAAA;AAAA;AAAA;AAAA;AAAA,UADF;AAKD,CAhCD;;GAAMD,O;;KAAAA,O;AAkCN,eAAeA,OAAf","sourcesContent":["import React, { useMemo } from \"react\";\nimport {\n  LocalStorage,\n  USERNAME_FIELD_NAME,\n} from \"../../../localstorage/LocalStorage\";\n\nexport interface MeetingProps {\n  meetingId?: string;\n}\n\nconst Meeting = ({ meetingId }: MeetingProps) => {\n  const openMediaDevices = async (constraints: MediaStreamConstraints) => {\n    console.log(navigator);\n    console.log(navigator.mediaDevices.getSupportedConstraints());\n    return await navigator.mediaDevices.getUserMedia(constraints);\n  };\n\n  try {\n    openMediaDevices({ video: true, audio: true })\n      .then((res) => {\n        console.log(\"Got MediaStream:\", res);\n      })\n      .catch((err) => {\n        console.log(err);\n      });\n  } catch (error) {\n    console.error(\"Error accessing media devices.\", error);\n  }\n\n  const userName = useMemo(() => {\n    return LocalStorage.getFromLocalStorage(USERNAME_FIELD_NAME);\n  }, []);\n\n  if (!meetingId || !meetingId.replaceAll(\" \", \"\").match(/^[0-9]+$/)) {\n    return <div>Invalid meeting id value.</div>;\n  }\n\n  return (\n    <div>\n      Welcome {userName}. Meeting with id {meetingId}\n    </div>\n  );\n};\n\nexport default Meeting;\n"]},"metadata":{},"sourceType":"module"}